*INTERVAL SCHEDULING*
import java.util.Arrays;
import java.util.Comparator;

class Interval {
    int start;
    int end;

    public Interval(int start, int end) {
        this.start = start;
        this.end = end;
    }
}

public class Interval_Scheduling {
    public static int maxActivities(Interval[] intervals) {
        if (intervals == null || intervals.length == 0) {
            return 0;
        }

        Arrays.sort(intervals, Comparator.comparingInt(a -> a.end));

        int count = 1;
        int currentEnd = intervals[0].end;

        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i].start >= currentEnd) {
                count++;
                currentEnd = intervals[i].end;
            }
        }

        return count;
    }

    public static void main(String[] args) {
        Interval[] intervals = {new Interval(1, 3), new Interval(2, 4), new Interval(3, 6), new Interval(5, 7), new Interval(8, 10), new Interval(9, 11)};
        System.out.println("Maximum number of activities that can be scheduled: " + maxActivities(intervals));
    }
}


*WEIGHTED INTERVAL*
import java.util.Arrays;

class WeightedInterval {
    static class Interval implements Comparable<Interval> {
        int start, finish, weight;

        public Interval(int start, int finish, int weight) {
            this.start = start;
            this.finish = finish;
            this.weight = weight;
        }

        public int compareTo(Interval interval) {
            return this.finish - interval.finish;
        }
    }

    static int latestNonConflict(Interval[] intervals, int i) {
        for (int j = i - 1; j >= 0; j--) {
            if (intervals[j].finish <= intervals[i].start) {
                return j;
            }
        }
        return -1;
    }

    static int findMaxWeight(Interval[] intervals) {
        Arrays.sort(intervals);

        int n = intervals.length;
        int[] dp = new int[n];
        dp[0] = intervals[0].weight;

        for (int i = 1; i < n; i++) {
            int inclWeight = intervals[i].weight;
            int l = latestNonConflict(intervals, i);
            if (l != -1) {
                inclWeight += dp[l];
            }
            dp[i] = Math.max(inclWeight, dp[i - 1]);
        }

        return dp[n - 1];
    }

    public static void main(String[] args) {
        Interval[] intervals = {
            new Interval(1, 3, 5),
            new Interval(2, 5, 6),
            new Interval(4, 6, 5),
            new Interval(6, 7, 4)
        };

        System.out.println("The maximum weighted sum of intervals: " + findMaxWeight(intervals));
    }
}


*RABIN KARP*
public class Rabin_Karp {
	public final static int d = 256;

	static void search(String pat, String txt, int q)
	{
		int M = pat.length();
		int N = txt.length();
		int i, j;
		int p = 0; 
		int t = 0; 
		int h = 1;
		for (i = 0; i < M - 1; i++)
			h = (h * d) % q;
		for (i = 0; i < M; i++) {
			p = (d * p + pat.charAt(i)) % q;
			t = (d * t + txt.charAt(i)) % q;
		}
		for (i = 0; i <= N - M; i++) {
			if (p == t) {
				for (j = 0; j < M; j++) {
					if (txt.charAt(i + j) != pat.charAt(j))
						break;
				}
				if (j == M)
					System.out.println("Pattern found at index " + i);
			}
			if (i < N - M) {
				t = (d * (t - txt.charAt(i) * h) + txt.charAt(i + M)) % q;
				if (t < 0)
					t = (t + q);
			}
		}
	}
	public static void main(String[] args)
	{
		String txt = "GEEKS FOR GEEKS";
		String pat = "GEEK";
		int q = 101; 
		search(pat, txt, q);
	}
}


*SHORTEST PATH*
import java.util.*;
public class GFG_Shortestpath {

	private int dist[];
	private Set<Integer> settled;
	private PriorityQueue<Node> pq;
	private int V;
	List<List<Node> > adj;

	public GFG_Shortestpath(int V)
	{

		this.V = V;
		dist = new int[V];
		settled = new HashSet<Integer>();
		pq = new PriorityQueue<Node>(V, new Node());
	}
	public void dijkstra(List<List<Node> > adj, int src)
	{
		this.adj = adj;

		for (int i = 0; i < V; i++)
			dist[i] = Integer.MAX_VALUE;
		pq.add(new Node(src, 0));
		dist[src] = 0;

		while (settled.size() != V) {

			if (pq.isEmpty())
				return;

			int u = pq.remove().node;

			if (settled.contains(u))
				continue;

			settled.add(u);

			e_Neighbours(u);
		}
	}

	private void e_Neighbours(int u)
	{

		int edgeDistance = -1;
		int newDistance = -1;

		for (int i = 0; i < adj.get(u).size(); i++) {
			Node v = adj.get(u).get(i);

			if (!settled.contains(v.node)) {
				edgeDistance = v.cost;
				newDistance = dist[u] + edgeDistance;

				if (newDistance < dist[v.node])
					dist[v.node] = newDistance;

				pq.add(new Node(v.node, dist[v.node]));
			}
		}
	}

	public static void main(String arg[])
	{

		int V = 5;
		int source = 0;

		List<List<Node> > adj= new ArrayList<List<Node> >();

		for (int i = 0; i < V; i++) {
			List<Node> item = new ArrayList<Node>();
			adj.add(item);
		}
		adj.get(0).add(new Node(1, 9));
		adj.get(0).add(new Node(2, 6));
		adj.get(0).add(new Node(3, 5));
		adj.get(0).add(new Node(4, 3));

		adj.get(2).add(new Node(1, 2));
		adj.get(2).add(new Node(3, 4));

		GFG_Shortestpath dpq = new GFG_Shortestpath(V);
		dpq.dijkstra(adj, source);
		System.out.println("The shorted path from node :");

		for (int i = 0; i < dpq.dist.length; i++)
			System.out.println(source + " to " + i + " is "
							+ dpq.dist[i]);
	}
}
class Node implements Comparator<Node> {

	public int node;
	public int cost;

	public Node() {}

	public Node(int node, int cost)
	{
		this.node = node;
		this.cost = cost;
	}

    public int compare(Node node1, Node node2)
	{
		if (node1.cost < node2.cost)

		if (node1.cost > node2.cost)
			return 1;
		return 0;
	}
}


*MATRIX MULTIPLICATION*
class MatrixChainMultiplication {
    static int matrixChainOrder(int p[], int n) {
        int m[][] = new int[n][n];
        int i, j, k, L, q;
        for (i = 1; i < n; i++)
            m[i][i] = 0;
        for (L = 2; L < n; L++) {
            for (i = 1; i < n - L + 1; i++) {
                j = i + L - 1;
                if (j == n)
                    continue;
                m[i][j] = Integer.MAX_VALUE;
                for (k = i; k <= j - 1; k++) {
                    q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                    if (q < m[i][j])
                        m[i][j] = q;
                }
            }
        }
        return m[1][n - 1];
    }

    public static void main(String args[]) {
        int arr[] = { 5,4,6,2,7 };
        int size = arr.length;
        System.out.println("Minimum number of multiplications is " + matrixChainOrder(arr, size));
    }
}
